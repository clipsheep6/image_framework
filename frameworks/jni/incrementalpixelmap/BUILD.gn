# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/image/ide/image_decode_config.gni")

config("incremental_pixelmap_jni_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "//utils/jni/jnikit/include",
    "//foundation/multimedia/image/interfaces/innerkits/include",
    "//foundation/multimedia/utils/include",
    "//foundation/multimedia/image/adapter/frameworks/bitmapconverter/native/include",
  ]

  if (use_mingw_win) {
    include_dirs += [ "//foundation/multimedia/image/mock/native/include" ]
  } else if (use_clang_mac) {
    include_dirs += [ "//foundation/multimedia/image/mock/native/include" ]
  } else {
    include_dirs += [ "//utils/native/base/include" ]
  }
}

group("g_incremental_pixelmap_jni") {
  deps = [ ":incremental_pixelmap_jni" ]
}

ohos_shared_library("incremental_pixelmap_jni") {
  sources = [ "src/ohos_image_IncrementalPixelmap.cpp" ]

  configs = [ ":incremental_pixelmap_jni_config" ]

  if (use_mingw_win) {
    defines = image_decode_windows_defines
    deps = [
      "//foundation/multimedia/image/interfaces/innerkits:image_static",
      "//foundation/multimedia/image/mock/native:log_mock_static",
      "//foundation/multimedia/image/mock/native:utils_mock_static",
      "//utils/jni:utils_jnikit_win",
    ]
  } else if (use_clang_mac) {
    defines = image_decode_mac_defines
    deps = [
      "//foundation/multimedia/image/interfaces/innerkits:image_static",
      "//foundation/multimedia/image/mock/native:log_mock_static",
      "//foundation/multimedia/image/mock/native:utils_mock_static",
      "//utils/jni:utils_jnikit_mac",
    ]
  } else {
    deps = [
      "//foundation/multimedia/image/interfaces/innerkits:image",
      "//utils/jni:utils_jnikit",
      "//utils/native/base:utils",
    ]
    external_deps = [ "hilog:libhilog" ]
  }

  subsystem_name = "multimedia"
  part_name = "multimedia_image"
}
