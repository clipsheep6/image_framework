# Copyright (C) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/image_framework/ide/image_decode_config.gni")

SEPARATOR = "/"
BASE_DIR = "$SEPARATOR/foundation"
THIRD_DIR = "$SEPARATOR/third_party"

config("native_public_config") {
  include_dirs = [
    "include",
    "$BASE_DIR/arkui/napi/interfaces/inner_api",
    "$BASE_DIR/arkui/napi/interfaces/kits",
    "$BASE_DIR/multimedia/image_framework/interfaces/kits/native/include",
    "$BASE_DIR/multimedia/image_framework/interfaces/kits/native/include/image",
    "$BASE_DIR/multimedia/image_framework/interfaces/innerkits/include",
    "$THIRD_DIR/node/src",
    "$resource_management_subsystem/interfaces/native/resource/include",
    "$BASE_DIR/multimedia/image_framework/frameworks/kits/js/common/pixelmap_ndk",
  ]
}

ohos_shared_library("image_ndk") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "image_mdk.cpp" ]
  public_configs = [ ":native_public_config" ]
  deps = [ "$image_subsystem/interfaces/kits/js/common:image" ]

  innerapi_tags = [ "ndk" ]
  subsystem_name = "multimedia"
  part_name = "image_framework"
}

ohos_shared_library("image_receiver_ndk") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "image_receiver_mdk.cpp" ]
  public_configs = [ ":native_public_config" ]
  deps = [ "$image_subsystem/interfaces/kits/js/common:image" ]

  innerapi_tags = [ "ndk" ]
  subsystem_name = "multimedia"
  part_name = "image_framework"
}

ohos_shared_library("image_source_ndk") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "image_source_mdk.cpp" ]
  public_configs = [ ":native_public_config" ]
  deps = [ "$image_subsystem/interfaces/kits/js/common:image" ]

  innerapi_tags = [ "ndk" ]
  subsystem_name = "multimedia"
  part_name = "image_framework"
}

ohos_shared_library("image_packer_ndk") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "image_packer_mdk.cpp" ]
  public_configs = [ ":native_public_config" ]
  deps = [ "$image_subsystem/interfaces/kits/js/common:image" ]

  innerapi_tags = [ "ndk" ]
  subsystem_name = "multimedia"
  part_name = "image_framework"
}

ohos_shared_library("image_source_ndk2") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "image_source2.cpp",
              "image_source2_impl.cpp",
              ]

  public_configs = [ ":native_public_config" ]

  deps = ["$image_subsystem/interfaces/kits/js/common:image",
          "$image_subsystem/frameworks/kits/js/common/pixelmap_ndk:pixelmap_ndk2",
          "$image_subsystem/interfaces/innerkits:image_native",
          ]
          
  external_deps = ["c_utils:utils"]

  innerapi_tags = [ "ndk" ]
  subsystem_name = "multimedia"
  part_name = "image_framework"
}

ohos_shared_library("image_packer_ndk2") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "image_packer2.cpp",
              "image_packer2_impl.cpp",
               ]
  public_configs = [ ":native_public_config" ]
  deps = [ "$image_subsystem/interfaces/kits/js/common:image",
            "$image_subsystem/interfaces/innerkits:image_native",
            "$image_subsystem/frameworks/kits/js/common/pixelmap_ndk:pixelmap_ndk2",
            "$image_subsystem/frameworks/kits/js/common/ndk:image_source_ndk2", 
            ]

  innerapi_tags = [ "ndk" ]
  subsystem_name = "multimedia"
  part_name = "image_framework"
}