diff --git a/frameworks/innerkitsimpl/codec/src/image_source.cpp b/frameworks/innerkitsimpl/codec/src/image_source.cpp
index 7b08f67..f523e87 100644
--- a/frameworks/innerkitsimpl/codec/src/image_source.cpp
+++ b/frameworks/innerkitsimpl/codec/src/image_source.cpp
@@ -1479,6 +1479,14 @@ void ImageSource::CopyOptionsToPlugin(const DecodeOptions &opts, PixelDecodeOpti
     plOpts.desiredColorSpace = (colorSearch != COLOR_SPACE_MAP.end()) ? colorSearch->second : PlColorSpace::UNKNOWN;
     plOpts.allowPartialImage = opts.allowPartialImage;
     plOpts.editable = opts.editable;
+    if (opts.fillColor.isValidColor) {
+        plOpts.plFillColor.isValidColor = opts.fillColor.isValidColor;
+        plOpts.plFillColor.color = opts.fillColor.color;
+    }
+    if (opts.SVGResize.isValidPercentage) {
+        plOpts.plSVGResize.isValidPercentage = opts.SVGResize.isValidPercentage;
+        plOpts.plSVGResize.resizePercentage = opts.SVGResize.resizePercentage;
+    }
 }

 void ImageSource::CopyOptionsToProcOpts(const DecodeOptions &opts, DecodeOptions &procOpts, PixelMap &pixelMap)
diff --git a/frameworks/innerkitsimpl/test/unittest/image_source_svg_test.cpp b/frameworks/innerkitsimpl/test/unittest/image_source_svg_test.cpp
index 9877c84..10fcb84 100644
--- a/frameworks/innerkitsimpl/test/unittest/image_source_svg_test.cpp
+++ b/frameworks/innerkitsimpl/test/unittest/image_source_svg_test.cpp
@@ -42,7 +42,7 @@ class ImageSourceSvgTest : public testing::Test {};
  */
 HWTEST_F(ImageSourceSvgTest, SvgImageDecode, TestSize.Level3)
 {
-    GTEST_LOG_(INFO) << "ImageSourceSvgTest: SvgImageDecode start";
+    GTEST_LOG_(INFO) << "ImageSourceSvgTest: SvgImageDecode start ================================================= 1";^M

     const std::string testName = TEST_FILE_SVG;

@@ -57,16 +57,20 @@ HWTEST_F(ImageSourceSvgTest, SvgImageDecode, TestSize.Level3)
     auto imageSource = ImageSource::CreateImageSource(inName, opts, errorCode);
     ASSERT_EQ(errorCode, SUCCESS);
     ASSERT_NE(imageSource.get(), nullptr);
-
+    GTEST_LOG_(INFO) << "ImageSourceSvgTest: SvgImageDecode " << "ImageSource:CreateImageSource";^M
     /**
      * @tc.steps: step2. decode image source to pixel map by default decode options
      * @tc.expected: step2. decode image source to pixel map success.
      */
     DecodeOptions decodeOpts;
+    decodeOpts.fillColor.isValidColor = true;^M
+    decodeOpts.fillColor.color = 0xFF00FF;^M
+    decodeOpts.SVGResize.isValicPercentage = true;^M
+    decodeOpts.SVGResize.resizePercentage = 200;^M
     auto pixelMap = imageSource->CreatePixelMap(decodeOpts, errorCode);
     ASSERT_EQ(errorCode, SUCCESS);
     ASSERT_NE(pixelMap.get(), nullptr);
-
+    GTEST_LOG_(INFO) << "ImageSourceSvgTest: SvgImageDecode " << "ImageSource:CreatePixelmap";^M
     /**
      * @tc.steps: step3. compress the pixel map to jpg file.
      * @tc.expected: step3. pack pixel map success.
@@ -75,7 +79,7 @@ HWTEST_F(ImageSourceSvgTest, SvgImageDecode, TestSize.Level3)
     auto packSize = PackImage(outName, std::move(pixelMap));
     ASSERT_NE(packSize, 0);

-    GTEST_LOG_(INFO) << "ImageSourceSvgTest: SvgImageDecode end";
+    GTEST_LOG_(INFO) << "ImageSourceSvgTest: SvgImageDecode end =================================================== 2";^M
 }

 /**
diff --git a/frameworks/kits/js/common/image_source_napi.cpp b/frameworks/kits/js/common/image_source_napi.cpp
index ca88c4f..56d3893 100644
--- a/frameworks/kits/js/common/image_source_napi.cpp
+++ b/frameworks/kits/js/common/image_source_napi.cpp
@@ -587,6 +587,18 @@ static bool ParseDecodeOptions2(napi_env env, napi_value root, DecodeOptions* op
     if (!GET_INT32_BY_NAME(root, "fitDensity", opts->fitDensity)) {
         HiLog::Debug(LABEL, "no fitDensity");
     }
+    if (GET_UINT32_BY_NAME(root, "fillColor", opts->fillColor.color)) {
+        opts->fillColor.isValidColor = true;
+        HiLog::Debug(LABEL, "fillColor %{public}x", opts->fillColor.color);
+    } else {
+        HiLog::Debug(LABEL, "no fillColor");
+    }
+    if (GET_UINT32_BY_NAME(root, "SVGResize", opts->SVGResize.resizePercentage)) {
+        opts->SVGResize.isValidPercentage = true;
+        HiLog::Debug(LABEL, "SVGResize percentage %{public}x", opts->SVGResize.resizePercentage);
+    } else {
+        HiLog::Debug(LABEL, "no SVGResize percentage");
+    }
     return true;
 }

diff --git a/interfaces/innerkits/include/image_type.h b/interfaces/innerkits/include/image_type.h
index e27f602..54ffe73 100644
--- a/interfaces/innerkits/include/image_type.h
+++ b/interfaces/innerkits/include/image_type.h
@@ -155,6 +155,16 @@ struct ImageInfo {
     int32_t baseDensity = 0;
 };

+struct FillColor {
+    bool isValidColor = false;
+    uint32_t color = 0;
+};
+
+struct SVGResize {
+    bool isValidPercentage = false;
+    uint32_t resizePercentage = 100;
+};
+
 struct DecodeOptions {
     int32_t fitDensity = 0;
     Rect CropRect;
@@ -170,6 +180,8 @@ struct DecodeOptions {
     bool allowPartialImage = true;
     bool editable = false;
     MemoryUsagePreference preference = MemoryUsagePreference::DEFAULT;
+    FillColor fillColor;
+    SVGResize SVGResize;
 };

 enum class ScaleMode : int32_t {
diff --git a/plugins/common/libs/image/libsvgplugin/include/svg_decoder.h b/plugins/common/libs/image/libsvgplugin/include/svg_decoder.h
index a59476e..9dfd45d 100644
--- a/plugins/common/libs/image/libsvgplugin/include/svg_decoder.h
+++ b/plugins/common/libs/image/libsvgplugin/include/svg_decoder.h
@@ -23,6 +23,8 @@

 #if defined(USE_NEWSVG_IN_NEWSKIA_FLAG) || defined(NEW_SKIA)
 #include "modules/svg/include/SkSVGDOM.h"
+#include "modules/svg/include/SkSVGSVG.h"^M
+#include "modules/svg/include/SkSVGNode.h"^M
 #else
 #include "experimental/svg/model/SkSVGDOM.h"
 #endif
diff --git a/plugins/common/libs/image/libsvgplugin/src/svg_decoder.cpp b/plugins/common/libs/image/libsvgplugin/src/svg_decoder.cpp
index d5e0c08..9ff02ae 100644
--- a/plugins/common/libs/image/libsvgplugin/src/svg_decoder.cpp
+++ b/plugins/common/libs/image/libsvgplugin/src/svg_decoder.cpp
@@ -15,6 +15,7 @@

 #include "svg_decoder.h"

+#include <sstream>^M
 #include "include/core/SkBitmap.h"
 #include "include/core/SkCanvas.h"
 #include "include/core/SkImageInfo.h"
@@ -36,6 +37,9 @@ namespace {
 constexpr HiLogLabel LABEL = { LOG_CORE, LOG_TAG_DOMAIN_ID_PLUGIN, "SvgDecoder" };
 constexpr uint32_t SVG_IMAGE_NUM = 1;
 constexpr uint32_t SVG_BYTES_PER_PIXEL = 4;
+constexpr uint32_t SVG_FILL_COLOR_ATTR_WIDTH = 6;^M
+constexpr uint32_t SVG_FILL_COLOR_MASK = 0xFFFFFF;^M
+const std::string SVG_FILL_COLOR_ATTR = "fill";^M

 bool AllocShareBuffer(DecodeContext &context, uint64_t byteCount)
 {
@@ -426,6 +430,28 @@ bool SvgDecoder::BuildStream()
     return true;
 }

+static void SetSVGFillColor(SkSVGNode* node, std::string color)^M
+{^M
+    if (node == nullptr) {^M
+        return;^M
+    }^M
+    HiLog::Debug(LABEL, "[SetSVGFillColor] node tag %{public}d %{public}s.", node->tag(), color.c_str());^M
+    node->setAttribute(SVG_FILL_COLOR_ATTR.c_str(), color.c_str());^M
+    for (auto childNode : node->getChild()) {^M
+        SetSVGFillColor(childNode.get(), color);^M
+    }^M
+}^M
+^M
+static void SetSVGFillColor(SkSVGNode* node, uint32_t color)^M
+{^M
+    std::stringstream stream;^M
+    stream.fill('0');^M
+    stream.width(SVG_FILL_COLOR_ATTR_WIDTH);^M
+    stream << std::hex <<(color & SVG_FILL_COLOR_MASK);^M
+    std::string newValue(stream.str());^M
+    SetSVGFillColor(node, "#" + newValue);^M
+}^M
+^M
 bool SvgDecoder::BuildDom()
 {
     HiLog::Debug(LABEL, "[BuildDom] IN");
@@ -482,7 +508,10 @@ uint32_t SvgDecoder::DoSetDecodeOptions(uint32_t index, const PixelDecodeOptions
     }

     opts_ = opts;
-
+    ^M
+    if (opts_.plSVGResize.isValidPercentage) {^M
+        svgDom_->setResizePercentage(opts_.plSVGResize.resizePercentage);^M
+    }^M
     auto svgSize = svgDom_->containerSize();
     if (svgSize.isEmpty()) {
         HiLog::Error(LABEL, "[DoSetDecodeOptions] size is empty.");
@@ -535,6 +564,10 @@ uint32_t SvgDecoder::DoDecode(uint32_t index, DecodeContext &context)
         HiLog::Error(LABEL, "[DoDecode] DOM is null.");
         return Media::ERROR;
     }
+    ^M
+    if (opts_.plFillColor.isValidColor) {^M
+        SetSVGFillColor(svgDom_->getRoot(), opts_.plFillColor.color);^M
+    }^M

     if (!AllocBuffer(context)) {
         HiLog::Error(LABEL, "[DoDecode] alloc buffer failed.");
diff --git a/plugins/manager/include/image/abs_image_decoder.h b/plugins/manager/include/image/abs_image_decoder.h
index 374cd87..166f449 100644
--- a/plugins/manager/include/image/abs_image_decoder.h
+++ b/plugins/manager/include/image/abs_image_decoder.h
@@ -98,6 +98,8 @@ struct PixelDecodeOptions {
     PlAlphaType desireAlphaType = PlAlphaType::IMAGE_ALPHA_TYPE_PREMUL;
     bool allowPartialImage = true;
     bool editable = false;
+    PlFillColor plFillColor;
+    PlSVGResize plSVGResize;
 };

 class AbsImageDecoder {
diff --git a/plugins/manager/include/image/image_plugin_type.h b/plugins/manager/include/image/image_plugin_type.h
index 4e4cd28..3f5fe1e 100644
--- a/plugins/manager/include/image/image_plugin_type.h
+++ b/plugins/manager/include/image/image_plugin_type.h
@@ -119,6 +119,16 @@ struct PlSize {
     uint32_t height = 0;
 };

+struct PlFillColor {
+    bool isValidColor = false;
+    uint32_t color = 0;
+};
+
+struct PlSVGResize {
+    bool isValidPercentage = false;
+    uint32_t resizePercentage = 100;
+};
+
 struct PlImageInfo {
     PlSize size;
     PlPixelFormat pixelFormat = PlPixelFormat::UNKNOWN;
