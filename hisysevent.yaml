#  Copyright (c) 2022 Huawei Device Co., Ltd.
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#####################################################
#     below is the format of defining event         #
#####################################################
#domain: domain name.  [Only one domain name can be defined at the top]
#
#author: the author name who defined this event.
#date: the date when this event was defined, format is YYYY-MM-DD.
#logged: source file which refer to this event.
#usage: the usage of this event.
#//Define event name and event properties.
#@EVENT_NAME: the event definition part begin.
#  // __BASE is used for defining the basic info of the event.
#  // "type" optional values are: FAULT, STATISTICS, SECURITY, BEHAVIOR.
#  // "level" optional values are: CRITICAL, MINOR.
#  // "tag" set tags with may used by subscriber of this event, multiple tags divided by space.
#  // "desc" full description of this event.
#  @PARAMETER: {type: parameter type, arrsize: array length(optional), desc: parameter description}.
#  // follow the __BASE block, each line defines a parameter of this event.
#  // "type" optional values are: INT8, UINT8, INT16, UINT16, INT32, UINT32, INT64, UINT64, FLOAT, DOUBLE, STRING.
#  // "arrsize" of the parameter is an array, set a non-zero value.
#  // "desc" full description of this parameter.

# DESCRIPTION contains useridï¼Œrequest type.
# REASON contains errno num, and failed interface.

domain: MEDIALIBRARY

MEDIALIB_FILE_OPT_ERROR:
  __BASE: { type: FAULT, level: CRITICAL, desc: create file error }
  UID: { type: INT32, desc: user id}
  ERR_FILE: { type: STRING, desc: failed file }
  LINE: { type: UINT32, desc: failed line }
  ERROR_CODE: { type: INT32, desc: error code }
  FILE: { type: STRING, desc: file name }
  TYPE: { type: STRING, desc: operation type }
  CALLING_ID: { type: INT32, desc: calling uid }

MEDIALIB_DB_OPT_ERROR:
  __BASE: { type: FAULT, level: CRITICAL, desc: local db create file failure }
  UID: { type: INT32, desc: user id}
  ERR_FILE: { type: STRING, desc: failed file }
  LINE: { type: UINT32, desc: upgrade failed line }
  ERROR_CODE: { type: INT32, desc: error code }
  TYPE: { type: STRING, desc: operation type }
  CALLING_ID: { type: INT32, desc: calling uid }

MEDIALIB_DB_UPGRADE_ERROR:
  __BASE: { type: FAULT, level: CRITICAL, desc: local database upgrade failure }
  ERR_FILE: { type: STRING, desc: upgrade failed file }
  LINE: { type: UINT32, desc: upgrade failed line }

MEDIALIB_THUMBNAIL_STAT:
  __BASE: { type: BEHAVIOR, level: MINOR, desc: thumbnail aging is triggered when the screen is off }
  UID: { type: INT32, desc: user id}
  TIMES: { type: UINT32, desc: history trigger number }
  GNUMS: { type: UINT32, desc: generate thumbnail nums }
  ANUMS: { type: UINT32, desc: aging thumbnail nums }

MEDIALIB_DB_UPGRADE_STAT:
  __BASE: { type: BEHAVIOR, level: MINOR, desc: database upgrade }
  PRE_VERSION: { type: INT32, desc: pre upgrade version number }
  AFTER_VERSION: { type: INT32, desc: after upgrade version number }
  COUNT: { type: UINT32, desc: upgrade events count }

MEDIALIB_SYNC_STAT:
  __BASE: { type: BEHAVIOR, level: MINOR, desc: synchronization times between the local end and the cloud }
  TIMES: { type: UINT32, desc: sync times }

MEDIALIB_AGING_STAT:
  __BASE: { type: BEHAVIOR, level: MINOR, desc: aging state }
  TIMES: { type: UINT32, desc: history trigger times }
  COUNT: { type: UINT32, desc: the recycle number of aging }